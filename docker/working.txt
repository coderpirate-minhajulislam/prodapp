docker exec -it main-app bash
docker-compose up -d --build

php artisan serve --host=0.0.0.0 --port=8000




////////////////////////////////////////////////////////team stup instruction ///////////////////////////////////////////



first clone git than follow this process..........
docker-compose up -d --build 
docker exec -it dev_app sh
composer install
composer update
cp .env.example .env (if include env not cp env use)

chmod 777 -R /var/www/
chown -R www-data:www-data storage
chown -R www-data:www-data bootstrap/cache
chmod -R 775 storage
chmod -R 775 bootstrap/cache

php artisan key:generate (if it required otherwise not use this);
php artisan migrate (if it required otherwise not use this);

php artisan config:cache
php artisan config:clear
php artisan route:cache
php artisan route:clear
php artisan view:clear

docker system prune -a(if it's need otherwise not use )
docker-compose down 
docker-compose up -d --build 












































/////////////////////////////////////////////////////////////////////////////////////some additional information//////////////////////////////////////////////////////////////

cd /var/www
composer create-project --prefer-dist laravel/laravel .
docker exec -it laravel_app sh
npm install
npm run dev
composer update
docker-compose up -d --build 
make build

docker system prune -a

#RUN chmod 777 -R /var/www/

cp .env.example .env

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=root

CACHE_DRIVER=redis
REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=your_username
MAIL_PASSWORD=your_password
MAIL_ENCRYPTION=null


root 
root

 volumes:
#   mysql-data:
#     driver: local
#   redis-data:
#     driver: local


tail -f storage/logs/laravel.log

chown -R www-data:www-data storage
chown -R www-data:www-data bootstrap/cache
chmod -R 775 storage
chmod -R 775 bootstrap/cache

php artisan key:generate

php artisan config:cache
php artisan config:clear


<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.*)/$ /$1 [L,R=301]

    # Handle Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
</IfModule>


composer install
composer update


php artisan route:cache
php artisan route:clear
php artisan view:clear




server {
    listen 80;
    server_name your_domain_or_ip;

    root /var/www/html;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ =404;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version if necessary
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.ht {
        deny all;
    }

    location /phpmyadmin {
        root /usr/share/;
        index index.php index.html index.htm;
        location ~ ^/phpmyadmin/(.+\.php)$ {
            try_files $uri =404;
            root /usr/share/;
            fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version if necessary
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
        location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
            root /usr/share/;
        }
    }
}


# Configure SSH Access
sudo -u your-username mkdir -p /home/your-username/.ssh
sudo -u your-username chmod 700 /home/your-username/.ssh

sudo chown -R your-username:your-username /home/your-username/.ssh

sudo -u your-username touch /home/your-username/.ssh/authorized_keys
sudo -u your-username chmod 600 /home/your-username/.ssh/authorized_keys

sudo chmod 755 /home/your-username
sudo chown your-username:your-username /home/your-username

// Create SUDO User
adduser username

usermod -aG sudo username

// Generate SSH Key Pair
ssh-keygen -t ecdsa -b 521

// Install PHP and Extensions
sudo apt update
sudo add-apt-repository ppa:ondrej/php

sudo apt install php8.3-common php8.3-bcmath php8.3-mbstring php8.3-xml php8.3-curl php8.3-gd php8.3-zip php8.3-mysql


// Check PHP installed modules
php8.3 -m

// Install Composer
sudo apt install composer

// Install MySQL/Secure Installation
sudo apt install mysql-server
sudo mysql_secure_installation

// Setup Database and User
CREATE DATABASE yourdatabase;
CREATE USER 'your-username'@'localhost' IDENTIFIED BY 'your-password';
GRANT ALL PRIVILEGES ON yourdatabase.* TO 'your-username'@'localhost';
FLUSH PRIVILEGES;
EXIT;

// Install NVM/NodeJS
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

nvm --version

nvm install --lts

// Taking directory ownership
sudo chown -R username /directory-name

// Taking file ownership
sudo chown username filename

// Proper Directory Permissions (Navigate to your project root directory)
sudo chown -R $USER:www-data .

sudo find . -type f -exec chmod 664 {} \;

sudo find . -type d -exec chmod 775 {} \;

sudo chgrp -R www-data storage bootstrap/cache

sudo chmod -R ug+rwx storage bootstrap/cache

// Install Certbot
sudo apt install certbot python3-certbot-nginx

// Issue SSL Cert
sudo certbot --nginx -d glennraya.com

// SSH Config file (keep ssh-agent active)
User git
Hostname github.com
IdentityFile ~/.ssh/id_github
TCPKeepAlive yes
IdentitiesOnly yes
ServerAliveInterval 60



server {
    listen 80;
    listen [::]:80;
    server_name example.com;
    root /var/www/html/laravel/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_hide_header X-Powered-By;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}


symbolik link
sudo ln -s /etc/nginx/sites-available/
sudo ln -s /etc/nginx/sites-available/coderpirate.com /etc/nginx/sites-enabled/
sudo mysql -u root -p
CREATE DATABASE mydatabase;
CREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';
GRANT ALL PRIVILEGES ON mydatabase.* TO 'myuser'@'localhost';
FLUSH PRIVILEGES;
EXIT;


eval "$(ssh-agent -s)"

ssh-add ~/.ssh/id_github


index.nginx-debian.html

sudo ln -s /etc/nginx/sites-available/growever.com.bd /etc/nginx/sites-enabled/
